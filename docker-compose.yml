services:
  postgres:
    image: postgres:15
    container_name: db
    restart: always
    environment:
      POSTGRES_USER: hc_user
      POSTGRES_PASSWORD: hc_password
      POSTGRES_DB: hc_db
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - app-network

  gateway:
    container_name: gateway
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    env_file:
      - ./gateway/.env
    depends_on:
      - postgres
    networks:
      - app-network

  stockprice:
    container_name: stockprice
    build:
      context: ./stockprice
      dockerfile: Dockerfile
    ports:
      - "9006:9006"
    volumes:
      - ./stockprice:/app
      - /app/__pycache__
      - /app/.pytest_cache
    environment:
      - DATABASE_URL=postgresql://hc_user:hc_password@db:5432/hc_db
      - SERVICE_PORT=9006
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    depends_on:
      - postgres
    networks:
      - app-network

  stocktrend:
    container_name: stock
    build:
      context: ./stocktrend
      dockerfile: Dockerfile
    volumes:
      - ./stocktrend:/app
    ports:
      - "8081:8081"
    env_file:
      - ./stocktrend/.env
    depends_on:
      - postgres
    networks:
      - app-network

  irsummary:
    container_name: summary
    build:
      context: ./irsummary
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    env_file:
      - ./irsummary/.env
    depends_on:
      - postgres
    networks:
      - app-network

  dsdgen:
    container_name: gen
    build:
      context: ./dsdgen
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
    env_file:
      - ./dsdgen/.env
    depends_on:
      - postgres
    volumes:
      - ./dart_documents:/app/app/dart_documents
    networks:
      - app-network

  dsdcheck:
    container_name: check
    build:
      context: ./dsdcheck
      dockerfile: Dockerfile
    ports:
      - "8086:8086"
    volumes:
      - ./dsdcheck:/app
    env_file:
      - ./dsdcheck/.env
    depends_on:
      - postgres
    networks:
      - app-network

  n8n:
    container_name: n8n
    image: docker.n8n.io/n8nio/n8n
    restart: always
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=password
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=Asia/Seoul
    volumes:
      - ./n8n_data:/home/node/.n8n
      - ./:/data-input
    networks:
      - app-network

  newsclassifier:
    container_name: newsclassifier
    build:
      context: ./slm-newsclassifier-inference
      dockerfile: Dockerfile
    ports:
      - "8087:8087"
    volumes:
      - D:/portfolio-models/slm-newsclassifier-inference:/app
      - /app/__pycache__
      - newsclassifier-models:/app/models
    environment:
      - SERVICE_PORT=8087
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    networks:
      - app-network

  summarizer:
    container_name: summarizer
    build:
      context: ./slm-summarizer-inference
      dockerfile: Dockerfile
    ports:
      - "8088:8088"
    volumes:
      - D:/portfolio-models/slm-summarizer-inference:/app
      - /app/__pycache__
      - D:/portfolio-models/slm-summarizer-inference/offload:/app/offload
      - summarizer-models:/app/models
    environment:
      - SERVICE_PORT=8088
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    networks:
      - app-network

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    networks:
      - app-network

  issue:
    container_name: issue
    build:
      context: ./issue
      dockerfile: Dockerfile
    ports:
      - "8089:8089"
    volumes:
      - ./issue:/app
      - /app/__pycache__
    env_file:
      - ./issue/.env
    depends_on:
      - newsclassifier
      - summarizer
    networks:
      app-network:
        ipv4_address: 172.18.0.100

volumes:
  pgdata:
  newsclassifier-models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: D:/portfolio-models/newsclassifier-models
  summarizer-models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: D:/portfolio-models/summarizer-models

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16
