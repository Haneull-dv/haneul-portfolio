# 📝 개발 워크플로우 - 마이크로서비스 아키텍처

마이크로서비스 단위로 작업 분담 및 브랜치 관리

## 🏗️ 현재 서비스 목록
- **frontend**: Next.js 15 대시보드
- **gateway**: API 게이트웨이  
- **stockprice**: 주가 정보 조회 서비스 ⭐ NEW
- **stocktrend**: 주가 트렌드 분석
- **irsummary**: IR 보고서 요약
- **dsdgen**: 재무제표 생성
- **dsdcheck**: 재무제표 검증
- **n8n**: 워크플로우 자동화 ⭐ NEW

## 1. 🌿 새 기능 개발 시 브랜치 생성 작업

### 브랜치 네이밍 규칙
```bash
feature/SKY-(이슈번호)-service-name/feature-description
```

### 서비스별 브랜치 예시
```bash
# 주가 서비스 관련
git checkout -b feature/SKY-101-stockprice/api-endpoints
git checkout -b feature/SKY-102-stockprice/data-validation

# N8N 워크플로우 관련  
git checkout -b feature/SKY-103-n8n/stock-automation
git checkout -b feature/SKY-104-n8n/report-workflow

# 프론트엔드 관련
git checkout -b feature/SKY-105-frontend/stock-dashboard
git checkout -b feature/SKY-106-frontend/trend-charts

# 게이트웨이 관련
git checkout -b feature/SKY-107-gateway/stockprice-routing
```

### 기본 명령어
```bash
# 브랜치 생성 및 전환
git checkout -b feature/SKY-(이슈번호)-service-name/feature-description

# 변경 사항 확인
git status

# 변경된 파일 스테이징
git add .

# 작업브랜치에 커밋
git commit -m "SKY-(이슈번호): 구현 내용 간략히 설명"

# 작업브랜치에 푸쉬
git push -u origin 브랜치이름
```

### 커밋 메시지 예시
```bash
git commit -m "SKY-101: stockprice API 엔드포인트 구현"
git commit -m "SKY-102: 주가 데이터 검증 로직 추가"
git commit -m "SKY-103: N8N 주가 자동 수집 워크플로우 생성"
git commit -m "SKY-104: 대시보드 주가 차트 컴포넌트 추가"
```

## 2. 📋 PR(Pull Request) 생성 및 병합

### PR 생성하기
- GitHub 저장소 페이지로 이동
- 상단에 "Compare & pull request" 버튼 클릭 (최근 푸시한 브랜치)
- 또는 "Pull requests" 탭 → "New pull request" 버튼 클릭
- 베이스 브랜치(main)와 비교할 브랜치 선택
- PR 제목과 설명 작성 (변경사항 요약, 관련 이슈 등 포함)
- "Create pull request" 버튼 클릭

### 코드 리뷰 요청 및 진행
- PR 페이지에서 우측의 "Reviewers" 섹션에서 리뷰어 지정
- 리뷰어는 코드를 검토하고 코멘트, 변경 요청 또는 승인
- 요청된 변경사항이 있다면 로컬에서 수정 후 다시 커밋 및 푸시
- 모든 리뷰가 완료되고 승인되면 병합 가능

### PR 병합하기
- PR 페이지에서 "Merge pull request" 버튼 클릭
- 병합 방식 선택 (Merge commit, Squash and merge, Rebase and merge)
- "Confirm merge" 버튼 클릭
- 브랜치 삭제 옵션에서 원격 브랜치 삭제

### 로컬 환경 동기화
```bash
# main 브랜치로 전환
git checkout main

# 원격 변경사항 가져오기
git pull

# 필요 없는 로컬 브랜치 삭제
git branch -d feature/브랜치이름

# 새 기능 개발 시 최신 main에서 새 브랜치 생성
git checkout -b feature/new-feature
```

## 🐳 Docker 환경에서의 개발 워크플로우

### 개별 서비스 개발
```bash
# 특정 서비스만 재시작하여 테스트
make restart-stockprice
make restart-frontend

# 로그 확인하면서 개발
make logs-stockprice
```

### 통합 테스트
```bash
# 전체 시스템 재시작
make restart

# 주가 관련 서비스들만 테스트
make stock-services-up
```

## 🔗 서비스 간 연동 개발 시 주의사항

1. **API 스펙 변경** 시 관련 서비스들에 영향도 확인
2. **데이터베이스 스키마 변경** 시 마이그레이션 스크립트 포함
3. **N8N 워크플로우** 변경 시 백업 및 버전 관리
4. **환경변수 추가** 시 docker-compose.yml과 README 업데이트

깔깔
